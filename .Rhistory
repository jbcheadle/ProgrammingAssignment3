y <- c()
class(y)
y <- vector()
a <- c(1.6,"a")
type(a)
class(a)
b <- c("a", 1.6)
d <- c(FALSE,1.0)
d <- c(FALSE,1)
d <- c(FALSE,"a")
a[1]
a[1] <- 1.5
"a" + "b"
"a", "b"
1 + 1
list1 <- list(1,2,c(3,4), 5)
list1
list1[3]
list1[3][1]
list1[3][2]
x <- list(length=5)
x
x <- vector(list, length=5)
y <- vector("list", length=5)
y
m <- matrix(nrow=5, ncol=3)
z <- matrix(1:8, nrow=4, ncol=2)
z
r <- 1:8
dim(r) <- (2,4)
dim(r) <- c(2,4)
r
x <- 1:4
y <- 13:16
z <- rbind(x,y)
z
z[1,1] <- 5
z
z[1] <- 1:4
z
z[1] <- c(1:4)
z[1]
z
z[2]
z[3]
z[1,1]
class(z)
z
z[,1]
z[1]
z2
z[2]
z[2,4]
View(z)
z[x]
z[x,1]
z[x][1]
z[1]
z[1][1]
z[1][2]
x <- factor(c("yes","no","yes"))
x
attributes(x)
unclass(x)
x
y <- c("yes", "no", "no", "maybe")
y
y <- factor(c("yes", "no", "no", "maybe"))
y
unclass(y)
z <- factor(c("yes","yes","no","yes","no"), levels=c("yes","no"))
z
m <- (1:6, nrow=3, ncol=2)
m <- matrix(1:6, nrow=3, ncol=2)
m
dimnames(m) <- list(c("a","b","c"),c("d","e"))
m
m
m[1,]
m[1]
m[1,]
m[1,][2]
ls()
getwd()
dir()
data <- read.csv("hospital-data.csv")
initial <- read.csv("hospital-data.csv",nrows=100)
classes <- sapply(initial, class)
classes
class(classes)
charvector <- c("one","two")
class(charvector)
tabAll <-read.table("datatable.txt",colClasses=classes)
tabAll <-read.csv("hospital-data.csv",colClasses=classes)
tabAll <- read.csv("hospital-data.csv",colClasses=class)
tabAll <- read.csv("hospital-data.csv",colClasses=classes)
?read.csv
tabAll <- read.table("hospital-data.csv",colClasses=class)
tabAll <- read.table("hospital-data.csv",colClasses=classes)
swirl()
library(swirl)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
library(swirl)
library(swirl)
install_from_swirl("R Programming")
swirl(0)
5 + 7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
z <- c(z, 555, z)
c(z, 555, z)
z*2 + 100
sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
library(swirl)
swirl
swirl()
getwd()
ls(0)
ls()
x <- 9
ls()
dir(0)
dir()
?list.files
args(list.files())
args(list.files
)
str(list.files)
old.dir <- getwd()
dir.create(testdir)
testdir <- dir.create(0)
testdir <- dir.create()
dir.create(testdir)
dir.create()
?dir.create
dir.create("testdir")
setwd(testdir)
setwd("testdir")
getwd()
file.create("mytest.R")
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
?file.path
file.path('folder1','folder2')
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?':'
resume()
swirl()
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length-30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
?seq_along
seq_along(5,my_seq)
seq_along(from=5,my_seq)
seq_along(from=5,along.with=my_seq)
seq_along(my_seq)
numlist <- list(3,6,3,2,63)
lapply(sqrt,numlist)
lapply(numlist,sqrt)
x <- list(a = 1:4, b=rnorm(10), c=rnorm(20,1))
lapply(x,mean)
?runif
runif(1)
runif(2)
runif(3)
runif(4)
numvect <- as.vector(numlist)
numvect
numlist
class(numvect)
?as.vector
numvect <- as.vector(numlist,mode="numeric")
numvect
?apply
x <- matrix(rnorm(200),20,10)
x
rowSums(x = x)
rowMeans(x)
colSums(x)
colMeans(x)
?mapply
?rep
?tapply
library(swirl)
swirl(0)
swirl()
sapply(flags, unique)
vapply(flags, unique(numeric(1)))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
swirl()
printmessage2 <- function(x) {
if(is.na(x)) {
print("x is a missing value")
}
else if (x>0) {
print("x is greater than zero")
}
else {
print("x is less than or equal to zero")
}
invisible(x)
}
printmessage2(0)
printmessage2(NA)
printmessage2(1)
printmessage2 <- function(x) {
if(is.na(x)) {
print("x is a missing value")
}
else if (x>0) {
print("x is greater than zero")
}
else {
print("x is less than or equal to zero")
}
x
}
printmessage2(1)
printmessage2 <- function(x) {
if(is.na(x)) {
print("x is a missing value")
}
else if (x>0) {
print("x is greater than zero")
}
else {
print("x is less than or equal to zero")
}
}
printmessage2(3)
what <- printmessage2(3)
what
printmessage2 <- function(x) {
if(is.na(x)) {
print("x is a missing value")
}
else if (x>0) {
print("x is greater than zero")
}
else {
print("x is less than or equal to zero")
}
invisible(x)
}
what2 <- printmessage2(1)
what2
traceback(printmessage2(1))
mean(x)
traceback()
options(error=recover)
read.csv("butt")
1
1
dgs
print"butttt"
print("BUTT")
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1),100, replacement=TRUE, prob=c(0.3,0.7))
sample(c(0,1),100, replace=TRUE, prob=c(0.3,0.7))
flips<- sample(c(0,1),100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
mean(rnorm(10))
rnorm(mean=100, sd=25)
rnorm(10, mean=100, sd=25)
rpois(5, mean=10)
?rpois
rpois(5,lambda=10)
my_pois<- replicate(100, rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist,xlab="Speed")
plot(x=cars$speed, y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2
)
library(mtcars)
data(mtcars)
?boxplot
boxplot(data=mtcars, formula=mpg ~ cyl)
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
setwd("./ProgrammingAssignment3")
setwd("C:\\Program Files\\R\\Coursera\\Data Science R\\ProgrammingAssignment3")
dir()
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
rankall2("gds")
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
?rbind
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
data <- read.csv("outcome-of-care-measures.csv")
cleaned_data <- data[,c(2,7,11,17,23)]
colnames(cleaned_data) <- c("Name","State","heart attack",
"heart failure", "pneumonia")
reduced <- cleaned_data[,c("Name","State","heart attack")]
head(reduced)
tail(reduced)
red1 <- reduced[reduce$State==AL,
]
red1 <- reduced[reduced$State==AL,]
red1 <- reduced[reduced$State=="AL",]
head(red1)
suppressWarnings(red1[,outcome] <- as.numeric(levels(red1[,outcome]))[red1[,outcome]])
outcome <- "heart attack"
suppressWarnings(red1[,outcome] <- as.numeric(levels(red1[,outcome]))[red1[,outcome]])
red1 <- red1[complete.cases(red1),]
head(red1)
ordered <_ red1[order(red1[outcome],red1["Name"]),]
ordered <- red1[order(red1[outcome],red1["Name"]),]
head(ordered)
ordered[20,]
ordered[20,][1:2]
class(ordered[20,][1:2])
class(ordered[20,][[1:2]])
class(ordered[20,][[1:2,]])
class(ordered[20,1:2])
ordered[20,1:2][1]
ordered[20,1:2][,1]
ordered[20,1:2]
ordered[20,1:2][1,]
vect <- as.character(ordered[20,1:2])
vect
vect <- as.character(ordered[20,1:2][1,])
vect
ordered[20,]
df <- data.frame()
df <- rbind(df,ordered[20,1:2])
df
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
df <- rbind(df,c(NA,"AL"))
df
df <- rbind(df,c(NA,"AK"))
df
colnames(df) <- c("AL","AL","AK")
rownames(df) <- c("AL","AL","AK")
rownames(df) <- c("AL","AL","AZ")
rownames(df) <- c("AL","AZ","AZ")
rownames(df) <- c("AL","AK","AZ")
df
colnames(df) <- c("hospital","state")
df
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
rankall2("heart attack",20)
test - rankall2("heart attack",20)
test <- rankall2("heart attack",20)
head(test)
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
test <- rankall2("heart attack",20)
head(test)
test
head(test,10)
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
test <- rankall2("heart attack",20)
head(test)
head(test,20)
head(test,10)
tail(rankall("pneumonia","worst"),3)
tail(rankall2("pneumonia","worst"),3)
dim(ordered)
dim(ordered)[1]
tail(rankall2("heart failure"),10)
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
tail(rankall2("heart failure"),10)
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
tail(rankall2("heart failure"),10)
warnings()
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
test <- rankall2("heart attack",20)
tail(test,3)
test <- rankall2("pneumonia",10)
head(test)
head(red1)
if(num=="best") num<-1
num<-"best"
if(num=="best") num<-1
num
class(num)
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
test <- rankall2("heart attack",20)
head(test,10)
tail(rankall("pneumonia","worst"),3)
tail(rankall2("pneumonia","worst"),3)
tail(rankall("heart failure"),10)
tail(rankall2("heart failure"),10)
dim(ordered)[1]
ordered[51,1:2]
WV1 <- reduced[reduced$State=="WV",]
head(WV1)
suppresWarnings(WV1[,"pneumonia"]<- as.numeric(levels(WV2[,"pneumonia"]))[WV1[,"pneumonia"]])
suppressWarnings(WV1[,"pneumonia"]<- as.numeric(levels(WV2[,"pneumonia"]))[WV1[,"pneumonia"]])
suppressWarnings(WV1[,"pneumonia"]<- as.numeric(levels(WV1[,"pneumonia"]))[WV1[,"pneumonia"]])
suppressWarnings(WV1[,"pneumonia"]<- as.numeric(levels(WV1[,"pneumonia"]))[WV1[,"pneumonia"]])
head(WV1)
str(WV1)
WV1[,"pneumonia"] <- as.numeric(levels(WV1[,"pneumonia"]))[WV1[,"pneumonia"]]
WVreduced <- cleaned_data[,c("Name","State","pneumonia")]
WV1 <- WVreduced[WVreduced$State="WV",]
WV1 <- WVreduced[WVreduced$State=="WV",]
head(WV1)
WV1[,"pneumonia"] <- as.numeric(levels(WV1[,"pneumonia"]))[WV1[,"pneumonia"]]
WV1 <- WV1[complete.cases(WV1),]
head(WV1)
ordered_WV <- WV1[order(WV1["pneumonia"],WV1["Name"]),]
head(ordered_WV)
dim(ordered_WV)
ordered_WV[51,1:2]
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
tail(rankall2("pneumonia","worst"),3)
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
tail(rankall2("pneumonia","worst"),3)
dim(ordered)
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
tail(rankall2("pneumonia","worst"),3)
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
tail(rankall2("pneumonia","worst"),3)
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
source('C:/Program Files/R/Coursera/Data Science R/ProgrammingAssignment3/rankall2.R')
tail(rankall2("pneumonia","worst"),3)
head(rankall("heart attack",20),10)
head(rankall2("heart attack",20),10)
tail(rankall("pneumonia","worst"),3)
tail(rankall2("pneumonia","worst"),3)
tail(rankall2("heart failure"),3)
10
tail(rankall2("heart failure"),10)
